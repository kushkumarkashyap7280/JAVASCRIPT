<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Closures in JS</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 2rem;
        background: #f9f9f9;
      }
      h1,
      h2 {
        color: #2c3e50;
      }
      pre {
        background: #eee;
        padding: 1em;
        border-radius: 6px;
      }
      .explanation {
        margin-bottom: 2em;
      }
    </style>
  </head>
  <body>
    <h1>Lexical Scoping & Closures in JavaScript</h1>

    <div class="explanation">
      <h2>1. Lexical Scoping</h2>
      <p>
        <b>Lexical scoping</b> means that the accessibility of variables is
        determined by the physical structure of the code (how it is
        written/nested), not by the order in which functions are called.<br />
        In JavaScript, functions form their own scope, and inner functions have
        access to variables defined in their outer (parent) functions.<br />
        <b>Key point:</b> A function remembers the scope in which it was
        created, not where it is called from.
      </p>
      <pre><code>// Example: Lexical Scope
function outer() {
  let outerVar = 'I am from outer!';
  function inner() {
    console.log(outerVar); // Can access outerVar due to lexical scope
  }
  inner();
}
outer(); // Output: I am from outer!
</code></pre>
    </div>

    <div class="explanation">
      <h2>2. Closures</h2>
      <p>
        A <b>closure</b> is created when a function is defined inside another
        function, and the inner function accesses variables from the outer
        function.<br />
        The inner function "closes over" the variables from its lexical scope,
        even after the outer function has finished executing.<br />
        <b
          >Closures allow functions to have private data and persistent
          state.</b
        >
      </p>
      <pre><code>// Example: Closure
function makeCounter() {
  let count = 0; // 'count' is in the lexical scope of the inner function
  return function() {
    count++;
    return count;
  };
}

const counter = makeCounter();
console.log(counter()); // 1
console.log(counter()); // 2
console.log(counter()); // 3
</code></pre>
      <p>
        In this example, the returned function remembers the
        <code>count</code> variable from its lexical scope, even after
        <code>makeCounter</code> has finished running.
      </p>
    </div>

    <div class="explanation">
      <h2>3. Why Are Closures Useful?</h2>
      <ul>
        <li>Data privacy (emulate private variables)</li>
        <li>
          Factory functions (functions that return other functions with
          persistent state)
        </li>
        <li>
          Callbacks and event handlers (functions that "remember" their context)
        </li>
      </ul>
      <pre><code>// Example: Data Privacy with Closures
function secretHolder(secret) {
  return {
    getSecret: function() { return secret; },
    setSecret: function(newSecret) { secret = newSecret; }
  };
}

const holder = secretHolder('JS Rocks!');
console.log(holder.getSecret()); // JS Rocks!
holder.setSecret('Closures are cool!');
console.log(holder.getSecret()); // Closures are cool!
</code></pre>
    </div>

    <div class="explanation">
      <h2>4. Visual: Lexical Scope & Closure</h2>
      <pre><code>// Visualizing scope chain
function outer() {
  let a = 10;
  function middle() {
    let b = 20;
    function inner() {
      let c = 30;
      console.log(a, b, c); // 10 20 30
    }
    inner();
  }
  middle();
}
outer();
</code></pre>
      <p>
        <b>Each function has access to its own scope and all parent scopes.</b>
      </p>
    </div>

    <div class="explanation">
      <h2>5. Common Closure Pitfall</h2>
      <pre><code>// Example: Closure in a loop
var funcs = [];
for (var i = 0; i < 3; i++) {
  funcs.push(function() {
    console.log(i);
  });
}
funcs[0](); // 3
funcs[1](); // 3
funcs[2](); // 3
// All log 3, not 0, 1, 2!
// Because 'i' is shared (var is function-scoped)
</code></pre>
      <p>
        <b>Solution:</b> Use <code>let</code> (block-scoped) or an IIFE to
        capture the value.
      </p>
      <pre><code>// Corrected with let
var funcs = [];
for (let i = 0; i < 3; i++) {
  funcs.push(function() {
    console.log(i);
  });
}
funcs[0](); // 0
funcs[1](); // 1
funcs[2](); // 2
</code></pre>
    </div>

    <script>
      // 1. Lexical Scoping Example
      // The inner function can access variables from its outer function
      function lexicalOuter() {
        let outerVar = "Lexical Scope Example";
        function lexicalInner() {
          // lexicalInner forms a closure over outerVar
          console.log("Lexical Scoping:", outerVar); // Output: Lexical Scope Example
        }
        lexicalInner();
      }
      lexicalOuter();

      // 2. Closure Example
      // makeCounter returns a function that "remembers" the count variable
      function makeCounter() {
        let count = 0;
        return function () {
          count++;
          return count;
        };
      }
      const myCounter = makeCounter();
      console.log("Closure Example:", myCounter()); // 1
      console.log("Closure Example:", myCounter()); // 2
      console.log("Closure Example:", myCounter()); // 3
      // Even though makeCounter() has finished, the returned function still has access to count

      // 3. Data Privacy with Closures
      function secretHolder(secret) {
        return {
          getSecret: function () {
            return secret;
          },
          setSecret: function (newSecret) {
            secret = newSecret;
          },
        };
      }
      const holder = secretHolder("Hidden!");
      console.log("Get secret:", holder.getSecret()); // Hidden!
      holder.setSecret("Now revealed!");
      console.log("Get secret:", holder.getSecret()); // Now revealed!
      // secret is not accessible directly, only via the closure

      // 4. Visualizing Scope Chain
      function outer() {
        let a = 10;
        function middle() {
          let b = 20;
          function inner() {
            let c = 30;
            console.log("Scope Chain:", a, b, c); // 10 20 30
          }
          inner();
        }
        middle();
      }
      outer();

      // 5. Common Closure Pitfall: Loop with var
      var funcs = [];
      for (var i = 0; i < 3; i++) {
        funcs.push(function () {
          console.log("Pitfall with var:", i);
        });
      }
      funcs[0](); // 3
      funcs[1](); // 3
      funcs[2](); // 3
      // All log 3, not 0, 1, 2! Because 'i' is shared (function-scoped)

      // Solution: Use let (block-scoped)
      var funcsLet = [];
      for (let j = 0; j < 3; j++) {
        funcsLet.push(function () {
          console.log("Corrected with let:", j);
        });
      }
      funcsLet[0](); // 0
      funcsLet[1](); // 1
      funcsLet[2](); // 2
    </script>
  </body>
</html>
